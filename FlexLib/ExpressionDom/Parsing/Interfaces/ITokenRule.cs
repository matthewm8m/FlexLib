using System;
using System.Collections.Generic;

namespace FlexLib.ExpressionDom.Parsing
{
    /// <summary>
    /// Represents a rule that is used to generate tokens from source code.
    /// </summary>
    public interface ITokenRule
    {
        /// <summary>
        /// Uses a source object to generate a sequence of tokens to replace it.
        /// </summary>
        /// <param name="source">The source of the tokens</param>
        /// <returns>An <see cref="IEnumerable{Token}"/> of tokens generated by the rule.</returns>
        IEnumerable<Token> Tokenize(object source);
    }

    /// <summary>
    /// Represents a rule that is used to generate tokens from source code with a specified type.
    /// </summary>
    /// <typeparam name="T">The type of the source code.</typeparam>
    public abstract class TokenRule<T> : ITokenRule
    {
        /// <summary>
        /// The user-friendly name of the rule. Does not need to be specified.
        /// </summary>
        public string Name;

        /// <summary>
        /// Uses a source object to generate a sequence of tokens to replace it.
        /// </summary>
        /// <param name="source">The source of the tokens</param>
        /// <returns>An <see cref="IEnumerable{Token}"/> of tokens generated by the rule.</returns>
        public IEnumerable<Token> Tokenize(object source)
        {
            // Throw an error if the typing is mismatched.
            // Otherwise, perform default action.
            if (source is T sourceTyped)
                return Tokenize(sourceTyped);
            else
                throw new InvalidCastException($"Expected source to be type {typeof(T)}, got {source.GetType()}");
        }

        /// <summary>
        /// Uses a source object to generate a sequence of tokens to replace it.
        /// </summary>
        /// <param name="source">The source of the tokens</param>
        /// <returns>An <see cref="IEnumerable{Token}"/> of tokens generated by the rule.</returns>
        public abstract IEnumerable<Token> Tokenize(T source);
    }
}